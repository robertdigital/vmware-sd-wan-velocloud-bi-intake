"""

Copyright 2018-2020 VMware, Inc.
SPDX-License-Identifier: BSD-2-Clause

General Guidelines for functions in this file
Must be called with named variables
Write Behavior:
    If primary identifier and name exist in the database the existing record will be blindly overwritten
    Else new record will be added
Commit Behavior:
    If a mysql handle is provided a commit will occur at the end of the function
    Else you will need to commit after your call of this function
        This is so multiple calls can be committed at once for performance gains when code is being run remotely

"""

import logging
from typing import Dict

from mysql.connector import cursor, MySQLConnection

import fun_mysql_inserts as sql_inserts

# region attribute_upsert_functions


"""
Attribute Upserts
Stored Data Types:
    Required parameters:
        unique_key:
            This should be the primary key for the object you want to link the attribute to
            This primary key must exist in the main table for the given object
        name:
            Name of attribute to store
            Should be short but describe the data being stored
            Must not contain a type of data to store (num/bool/str etc.)
                Type of data is determined by the fields stored and referenced
    Optional parameters:
        All parameters default to None/Null
        used: boolean value - should generally answer question of if functionality is being used
        num: integer value - should generally answer how many/much of the functionality is being used
        text: string value - can be used to describe data being stored or store a value when other data types don't work
        filter_val: string value - used to create multi filterable fields in powerbi - Defaults to name-used
                                   There is a 100 character limit on filter_val
                                   Should attempt to limit the values generated by these
                                   Default value can be overwritten by providing a value to the call
"""

def upsert_edge_attribute(*, curs: cursor, log_name: str, edge_id: str, name: str, sql_cnx: MySQLConnection = None,
                          used: bool = None, num: int = None, text: str = None, filter_val: str = None):
    logger = logging.LoggerAdapter(logging.getLogger('MAIN'), {'VCO_CUSTOMER_EDGE': log_name})
    logger.info(f'UPDATE Attribute: {name} - used: {used} - num: {num}: text: {text}')
    sql_inserts.upsert_attribute(curs=curs, sql_cnx=sql_cnx, table_name='EdgeAttributes', unique_key_name='edge_uuid',
                                 unique_key=edge_id, name=name, used=used, num=num, text=text, filter_val=filter_val)
    return


def upsert_customer_attribute(*, curs: cursor, log_name: str, customer_lid: str, name: str,
                              sql_cnx: MySQLConnection = None, used: bool = None, num: int = None, text: str = None,
                              filter_val: str = None):
    logger = logging.LoggerAdapter(logging.getLogger('MAIN'), {'VCO_CUSTOMER_EDGE': log_name})
    logger.info(f'UPDATE Attribute: {name} - used: {used} - num: {num}: text: {text}')
    sql_inserts.upsert_attribute(curs=curs, sql_cnx=sql_cnx, table_name='CustomerAttributes',
                                 unique_key_name='customer_uuid', unique_key=customer_lid, name=name, used=used,
                                 num=num, text=text, filter_val=filter_val)
    return


def upsert_vco_attribute(*, curs: cursor, log_name: str, vco_link: str, name: str, sql_cnx: MySQLConnection = None,
                         used: bool = None, num: int = None, text: str = None, filter_val: str = None):
    logger = logging.LoggerAdapter(logging.getLogger('MAIN'), {'VCO_CUSTOMER_EDGE': log_name})
    logger.info(f'UPDATE Attribute: {name} - used: {used} - num: {num}: text: {text}')
    sql_inserts.upsert_attribute(curs=curs, sql_cnx=sql_cnx, table_name='VCOAttributes', unique_key_name='vco_link',
                                 unique_key=vco_link, name=name, used=used, num=num, text=text, filter_val=filter_val)
    return


def upsert_gateway_attribute(*, curs: cursor, log_name: str, gateway_id: str, name: str,
                             sql_cnx: MySQLConnection = None, used: bool = None, num: int = None, text: str = None,
                             filter_val: str = None):
    logger = logging.LoggerAdapter(logging.getLogger('MAIN'), {'VCO_CUSTOMER_EDGE': log_name})
    logger.info(f'UPDATE Attribute: {name} - used: {used} - num: {num}: text: {text}')
    sql_inserts.upsert_attribute(curs=curs, sql_cnx=sql_cnx, table_name='GatewayAttributes',
                                 unique_key_name='gateway_uuid', unique_key=gateway_id, name=name, used=used, num=num,
                                 text=text, filter_val=filter_val)
    return


# endregion


def upsert_vco(curs: cursor, vco_info: Dict[str, any], sql_cnx: MySQLConnection = None):
    query = f"""
            INSERT INTO VCO (name, link, partner, version)
            VALUES (%(name)s, %(link)s, %(partner)s, %(version)s)
            ON DUPLICATE KEY UPDATE link=VALUES(link), partner=VALUES(partner), version=VALUES(version);
            """

    curs.execute(query, vco_info)
    # only commit if a handle is provided, leaving the ability to commit multiple attributes with one commit call
    if sql_cnx:
        sql_cnx.commit()
    return
